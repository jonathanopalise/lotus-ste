
1) disable the selection of the preshifted sprites
2) apply the skew value

we need to get the skew into a3:
- $0007a2ea : 2641                               movea.l   d1,a3

22/12 12:53 something in place of the following instructions to populate a3:
$0007a2ea : 3001                               move.w    d1,d0
G$0007a2ec : 0240 fffc                          andi.w    #$fffc,d0 ; get offset in lookup table for pr
$0007a2f0 : 2070 0000                          movea.l   (a0,d0.w),a0 ; populate a0 with preshif

is start of sprite drawing routine 0x7a096?

Doing this I think disables the fetching of preshifted versions of the sprites.
There are up to 4 preshifted versions
- w 0x7a2e6 0x72 0x00 0x4e 0x71

7a46e - appears to part of the pit lane sign drawing routine

$0007a3c4 : 3018 move.w    (a0)+,d0  ; get the mask into d0 and advance the source pointer
$0007a3c6 : 3400 move.w    d0,d2     ; copy the mask into d2
$0007a3c8 : 4840 swap      d0        ; swap the mask into the higher word of d0
$0007a3ca : 3002 move.w    d2,d0     ; repopulate the lower word of d0
$0007a3cc : c191 and.l     d0,(a1)   ; apply the mask across the first 32 bits
$0007a3ce : 2218 move.l    (a0)+,d1  ; get the first 32 bits of image data
$0007a3d0 : 8399 or.l      d1,(a1)+  ; apply the image data on the first 32 bits
$0007a3d2 : c191 and.l     d0,(a1)   ; apply the mask across the second 32 bits
$0007a3d4 : 2218 move.l    (a0)+,d1  ; get the second 32 bits of image data
$0007a3d6 : 8399 or.l      d1,(a1)+  ; apply the image data on the second 32 bits

so it seems for each 16 pixels, we have
- 16 bits (2 bytes) of mask data
- 32 bits (4 bytes) of image data
- 32 bits (4 bytes) of image data
the mask data and image data is interleaved.

looks like the destination address in the 'bra' instruction at 0x7a3c0 is modified

car drawing (0x7a53a) is similar but only appears to draw 3 bitplanes:

$0007a604 : 3018                               move.w    (a0)+,d0
$0007a606 : 3400                               move.w    d0,d2
$0007a608 : 4840                               swap      d0
$0007a60a : 3002                               move.w    d2,d0
$0007a60c : c191                               and.l     d0,(a1)
$0007a60e : 2218                               move.l    (a0)+,d1
$0007a610 : 8399                               or.l      d1,(a1)+
$0007a612 : c199                               and.l     d0,(a1)+
$0007a614 : 3218                               move.w    (a0)+,d1
$0007a616 : 8369 f0fc                          or.w      d1,$f0fc(a1)



Need to get the sprites rendering as-is using the Blitter, and then worry later about skew

$00079828 : 6100 05e8                          bsr       $79e12
- is this some kind of outer loop for the scenery drawing?
- no scenery gets drawn when this is skipped


LEADING UP TO DRAW SPRITE:
- a1 is the destination address
- can we work out if it gets rounded to the nearest 8 or 16?

$0007a096 : 33f9 0007 c5b6 0007 ac+            move.w    $7c5b6,$7ac20
$0007a0a0 : 33f9 0007 c592 0007 ac+            move.w    $7c592,$7ac22
$0007a0aa : 247c 0000 0000                     movea.l   #0,a2
$0007a0b0 : 3c39 0007 cc78                     move.w    $7cc78,d6
$0007a0b6 : 0446 0080                          subi.w    #$80,d6
$0007a0ba : dc46                               add.w     d6,d6
$0007a0bc : dc46                               add.w     d6,d6
$0007a0be : 43f9 0007 024c                     lea       $7024c,a1
$0007a0c4 : 2271 6000                          movea.l   (a1,d6.w),a1
$0007a0c8 : 33fc ffff 0007 cc74                move.w    #$ffff,$7cc74
$0007a0d0 : 33c1 0007 a27e                     move.w    d1,$7a27e
$0007a0d6 : 6040                               bra.s     $7a118
$0007a0d8 : 33f9 0007 c66c 0007 ac+            move.w    $7c66c,$7ac20
$0007a0e2 : 33f9 0007 c648 0007 ac+            move.w    $7c648,$7ac22
$0007a0ec : 247c 0000 4100                     movea.l   #$4100,a2
$0007a0f2 : 3c39 0007 cc78                     move.w    $7cc78,d6
$0007a0f8 : 0446 0080                          subi.w    #$80,d6
$0007a0fc : dc46                               add.w     d6,d6
$0007a0fe : dc46                               add.w     d6,d6
$0007a100 : 43f9 0007 024c                     lea       $7024c,a1
$0007a106 : 2271 6000                          movea.l   (a1,d6.w),a1
$0007a10a : 33fc ffff 0007 cc74                move.w    #$ffff,$7cc74
$0007a112 : 33c1 0007 a27e                     move.w    d1,$7a27e
$0007a118 : b07c 0040                          cmp.w     #$40,d0
$0007a11c : 6400 008c                          bcc       $7a1aa
$0007a120 : 5379 0007 ac20                     subq.w    #1,$7ac20
$0007a126 : b079 0007 ac20                     cmp.w     $7ac20,d0
$0007a12c : 6400 014c                          bcc       $7a27a
$0007a130 : e24a                               lsr.w     #1,d2
$0007a132 : 3602                               move.w    d2,d3
$0007a134 : d040                               add.w     d0,d0
$0007a136 : 3800                               move.w    d0,d4
$0007a138 : d844                               add.w     d4,d4
$0007a13a : d844                               add.w     d4,d4
$0007a13c : 41f9 0002 b880                     lea       $2b880,a0
$0007a142 : 33f0 4004 0007 ad6e                move.w    4(a0,d4.w),$7ad6e
$0007a14a : 33f0 4006 0007 a280                move.w    6(a0,d4.w),$7a280
$0007a152 : 3430 4008                          move.w    8(a0,d4.w),d2
$0007a156 : 3a30 4000                          move.w    (a0,d4.w),d5
$0007a15a : 9445                               sub.w     d5,d2
$0007a15c : c5c3                               muls.w    d3,d2
$0007a15e : d482                               add.l     d2,d2
$0007a160 : 4842                               swap      d2
$0007a162 : d445                               add.w     d5,d2
$0007a164 : 9279 0007 ac22                     sub.w     $7ac22,d1
$0007a16a : e741                               asl.w     #3,d1
$0007a16c : 9242                               sub.w     d2,d1
$0007a16e : 3430 400a                          move.w    $a(a0,d4.w),d2
$0007a172 : 3a30 4002                          move.w    2(a0,d4.w),d5
$0007a176 : 9445                               sub.w     d5,d2
$0007a178 : c5c3                               muls.w    d3,d2
$0007a17a : d482                               add.l     d2,d2
$0007a17c : 4842                               swap      d2
$0007a17e : d445                               add.w     d5,d2
$0007a180 : 41f9 0003 0e40                     lea       $30e40,a0
$0007a186 : 3830 0002                          move.w    2(a0,d0.w),d4
$0007a18a : 3a30 0000                          move.w    (a0,d0.w),d5
$0007a18e : 9845                               sub.w     d5,d4
$0007a190 : c9c3                               muls.w    d3,d4
$0007a192 : d884                               add.l     d4,d4
$0007a194 : 4844                               swap      d4
$0007a196 : d845                               add.w     d5,d4
$0007a198 : d844                               add.w     d4,d4
$0007a19a : c3c4                               muls.w    d4,d1
$0007a19c : 4841                               swap      d1
$0007a19e : b47c 005e                          cmp.w     #$5e,d2
$0007a1a2 : 6504                               bcs.s     $7a1a8
$0007a1a4 : 343c 005e                          move.w    #$5e,d2
$0007a1a8 : 6056                               bra.s     $7a200
$0007a1aa : b079 0007 ac20                     cmp.w     $7ac20,d0
$0007a1b0 : 6400 00c8                          bcc       $7a27a
$0007a1b4 : d040                               add.w     d0,d0
$0007a1b6 : 3400                               move.w    d0,d2
$0007a1b8 : d442                               add.w     d2,d2
$0007a1ba : d442                               add.w     d2,d2
$0007a1bc : 41f9 0002 b880                     lea       $2b880,a0
$0007a1c2 : 33f0 2004 0007 ad6e                move.w    4(a0,d2.w),$7ad6e
$0007a1ca : 33f0 2006 0007 a280                move.w    6(a0,d2.w),$7a280
$0007a1d2 : 9279 0007 ac22                     sub.w     $7ac22,d1
$0007a1d8 : e741                               asl.w     #3,d1
$0007a1da : 41f9 0002 b880                     lea       $2b880,a0
$0007a1e0 : 9270 2000                          sub.w     (a0,d2.w),d1
$0007a1e4 : 3430 2002                          move.w    2(a0,d2.w),d2
$0007a1e8 : 41f9 0003 0e40                     lea       $30e40,a0
$0007a1ee : 3830 0000                          move.w    (a0,d0.w),d4
$0007a1f2 : d844                               add.w     d4,d4
$0007a1f4 : c3c4                               muls.w    d4,d1
$0007a1f6 : 4841                               swap      d1
$0007a1f8 : b47c 005e                          cmp.w     #$5e,d2
$0007a1fc : 6502                               bcs.s     $7a200
$0007a1fe : 745e                               moveq     #$5e,d2
$0007a200 : 4a79 0007 cc74                     tst.w     $7cc74
$0007a206 : 6b68                               bmi.s     $7a270
$0007a208 : 670e                               beq.s     $7a218
$0007a20a : 2279 0007 a276                     movea.l   $7a276,a1
$0007a210 : 47f9 0007 acc6                     lea       $7acc6,a3
$0007a216 : 600c                               bra.s     $7a224
$0007a218 : 2279 0007 a272                     movea.l   $7a272,a1
$0007a21e : 47f9 0007 ac2c                     lea       $7ac2c,a3
$0007a224 : 3c07                               move.w    d7,d6
$0007a226 : e747                               asl.w     #3,d7
$0007a228 : de46                               add.w     d6,d7
$0007a22a : 3c01                               move.w    d1,d6
$0007a22c : 4446                               neg.w     d6
$0007a22e : 0646 0090                          addi.w    #$90,d6
$0007a232 : e446                               asr.w     #2,d6
$0007a234 : 4a79 0007 cc74                     tst.w     $7cc74
$0007a23a : 6608                               bne.s     $7a244
$0007a23c : 3839 0007 cc76                     move.w    $7cc76,d4
$0007a242 : dc44                               add.w     d4,d6
$0007a244 : 3839 0007 a280                     move.w    $7a280,d4
$0007a24a : 4444                               neg.w     d4
$0007a24c : e444                               asr.w     #2,d4
$0007a24e : dc44                               add.w     d4,d6
$0007a250 : e646                               asr.w     #3,d6
$0007a252 : 4a46                               tst.w     d6
$0007a254 : 6a02                               bpl.s     $7a258
$0007a256 : 7c00                               moveq     #0,d6
$0007a258 : bc7c 0008                          cmp.w     #8,d6
$0007a25c : 6b02                               bmi.s     $7a260
$0007a25e : 7c08                               moveq     #8,d6
$0007a260 : 33c6 0007 a27c                     move.w    d6,$7a27c
$0007a266 : de46                               add.w     d6,d7
$0007a268 : 1e33 7000                          move.b    (a3,d7.w),d7
$0007a26c : 0247 00ff                          andi.w    #$ff,d7
$0007a270 : 6012                               bra.s     $7a284
$0007a272 : 0005 f1e4                          ori.b     #$e4,d5
$0007a276 : 0006 8508                          ori.b     #8,d6
$0007a27a : 4e75                               rts       
$0007a27c : 0004 0120                          ori.b     #$20,d4
$0007a280 : 0000 0000                          ori.b     #0,d0
$0007a284 : 0641 0090                          addi.w    #$90,d1
$0007a288 : de47                               add.w     d7,d7
$0007a28a : de47                               add.w     d7,d7
$0007a28c : 2049                               movea.l   a1,a0
$0007a28e : 2070 7000                          movea.l   (a0,d7.w),a0
$0007a292 : 3818                               move.w    (a0)+,d4
$0007a294 : 3618                               move.w    (a0)+,d3
$0007a296 : 33d8 0007 ad72                     move.w    (a0)+,$7ad72
$0007a29c : 33d8 0007 a642                     move.w    (a0)+,$7a642
$0007a2a2 : 4a79 0007 a27e                     tst.w     $7a27e
$0007a2a8 : 6b08                               bmi.s     $7a2b2
$0007a2aa : 9279 0007 a642                     sub.w     $7a642,d1
$0007a2b0 : 5341                               subq.w    #1,d1
$0007a2b2 : 3e02                               move.w    d2,d7
$0007a2b4 : 9443                               sub.w     d3,d2
$0007a2b6 : 5242                               addq.w    #1,d2
$0007a2b8 : 3a02                               move.w    d2,d5
$0007a2ba : 3004                               move.w    d4,d0
$0007a2bc : e240                               asr.w     #1,d0
$0007a2be : 9240                               sub.w     d0,d1
$0007a2c0 : 33c4 0007 abf6                     move.w    d4,$7abf6
$0007a2c6 : 33c1 0007 abf8                     move.w    d1,$7abf8
$0007a2cc : 33c7 0007 abfa                     move.w    d7,$7abfa
$0007a2d2 : 3039 0007 a642                     move.w    $7a642,d0
$0007a2d8 : e240                               asr.w     #1,d0
$0007a2da : 9240                               sub.w     d0,d1 ; this seems only to affect the xpos of the player car
-----
; i could do with capturing the value of d1 here to put into a3 - how?
; current theory is that d1 is disposable but d0 must be retained
; so can we just put #0 into d0 instead of doing all the calculations?
; what does seem to work is this:
;
; $0007a2e6 : 7200                               moveq     #0,d1
; $0007a2e8 : 4e71                               nop
; 
; so could we put a move.l d1,a3 at 7a2dc and move everything else down, so that the moveq
; above goes where the nop goes?
-----
$0007a2dc : c279 0007 a642                     and.w     $7a642,d1 ; the value of d1 before this might be the exact xpos of the sprite
$0007a2e2 : 3401                               move.w    d1,d2 ; copy sprite xpos into d2
$0007a2e4 : e842                               asr.w     #4,d2 ; calculate start xpos of sprite in 16 pixel blocks
$0007a2e6 : 0241 000f                          andi.w    #$f,d1
$0007a2ea : 3001                               move.w    d1,d0
$0007a2ec : 0240 fffc                          andi.w    #$fffc,d0 ; get offset in lookup table for preshifted sprite data
$0007a2f0 : 2070 0000                          movea.l   (a0,d0.w),a0 ; populate a0 with preshifted sprite data address
$0007a2f4 : 3004                               move.w    d4,d0
$0007a2f6 : d041                               add.w     d1,d0
$0007a2f8 : 0640 000f                          addi.w    #$f,d0
$0007a2fc : e848                               lsr.w     #4,d0
$0007a2fe : 3800                               move.w    d0,d4 ; d0 is used here so we need to be careful with changing or not setting it above
$0007a300 : 3c02                               move.w    d2,d6
$0007a302 : dc44                               add.w     d4,d6
$0007a304 : 3204                               move.w    d4,d1
$0007a306 : 0c79 0003 0007 ad72                cmpi.w    #3,$7ad72
$0007a30e : 6700 0186                          beq       $7a496

; START HERE

$0007a312 : 4a42                               tst.w     d2 ; set flags for d2
$0007a314 : 6a16                               bpl.s     $LABEL_7a32c ; branch if d2>0
$0007a316 : 4a46                               tst.w     d6
$0007a318 : 6b00 0320                          bmi       $7a63a
$0007a31c : 3002                               move.w    d2,d0
$0007a31e : 7400                               moveq     #0,d2 ; clip scenery against left (left endmask should be 0xffff)
                                                               ; at this point, left endmask needs be to 0xffff
$0007a320 : d840                               add.w     d0,d4
$0007a322 : d040                               add.w     d0,d0
$0007a324 : 90c0                               suba.w    d0,a0
$0007a326 : d040                               add.w     d0,d0
$0007a328 : d040                               add.w     d0,d0
$0007a32a : 90c0                               suba.w    d0,a0

LABEL_7a32c:
$0007a32c : 4a45                               tst.w     d5 ; do we need to clip the top of the sprite?
$0007a32e : 6a18                               bpl.s     $7a348 ; if we take the jump, no need to clip the top
$0007a330 : 4a47                               tst.w     d7 ; is the bottom of the sprite off screen too?
$0007a332 : 6b00 0306                          bmi       $7a63a
$0007a336 : 3005                               move.w    d5,d0
$0007a338 : 7a00                               moveq     #0,d5
$0007a33a : d640                               add.w     d0,d3
$0007a33c : d040                               add.w     d0,d0
$0007a33e : c1c1                               muls.w    d1,d0
$0007a340 : 90c0                               suba.w    d0,a0
$0007a342 : d040                               add.w     d0,d0
$0007a344 : d040                               add.w     d0,d0
$0007a346 : 90c0                               suba.w    d0,a0

$0007a348 : bc7c 0014                          cmp.w     #$14,d6
$0007a34c : 6b10                               bmi.s     $LABEL_7a35e ; something to do with clipping against right side of screen
$0007a34e : b47c 0014                          cmp.w     #$14,d2 ; does sprite need clipping on right edge?
$0007a352 : 6a00 02e6                          bpl       $7a63a ; something to do with clipping - if sprite is entirely off screen?
$0007a356 : 3006                               move.w    d6,d0
$0007a358 : 0440 0014                          subi.w    #$14,d0
$0007a35c : 9840                               sub.w     d0,d4 ; this is chopping off the sprite on the right edge

LABEL_7a35e:                                   ; so at this point, right endmask needs to be 0xffff?
$0007a35e : be79 0007 ad6e                     cmp.w     $7ad6e,d7
$0007a364 : 630e                               bls.s     $7a374
$0007a366 : 9e79 0007 ad6e                     sub.w     $7ad6e,d7
$0007a36c : 5247                               addq.w    #1,d7
$0007a36e : 9647                               sub.w     d7,d3
$0007a370 : 6300 02c8                          bls       $7a63a
$0007a374 : 3c04                               move.w    d4,d6
$0007a376 : dc46                               add.w     d6,d6
$0007a378 : 0446 0028                          subi.w    #$28,d6
$0007a37c : 4446                               neg.w     d6
$0007a37e : 3e01                               move.w    d1,d7            ; d7 = d1
$0007a380 : 9e44                               sub.w     d4,d7            ; d7 = d1 - d4 (blocks of 16 pixels to skip after each line)

$0007a382 : 3007                               move.w    d7,d0            ; ...
$0007a384 : d040                               add.w     d0,d0            ; ...
$0007a386 : d040                               add.w     d0,d0            ; ...
$0007a388 : de40                               add.w     d0,d7            ; ...
$0007a38a : de47                               add.w     d7,d7            ; d7 = d7 * 10 (final value for number of source bytes to skip after each line)
$0007a38c : e546                               asl.w     #2,d6            ; d6 = d6 * 4 (final value of destination bytes to skip after each line)
$0007a38e : d442                               add.w     d2,d2            ; d2 = d2 * 2
$0007a390 : 3005                               move.w    d5,d0            ; begin expression...
$0007a392 : d040                               add.w     d0,d0            ; ...
$0007a394 : d040                               add.w     d0,d0            ; ...
$0007a396 : da40                               add.w     d0,d5            ; ...
$0007a398 : e745                               asl.w     #3,d5            ; ... d5 = d5 * 40
$0007a39a : d445                               add.w     d5,d2            ; begin expression...
$0007a39c : d442                               add.w     d2,d2            ; ...
$0007a39e : d442                               add.w     d2,d2            ; ...
$0007a3a0 : d4c2                               adda.w    d2,a2            ; ... d2 = (d2 * 8 [see 7a38c]) + d5 (d5 must the start of a line within logbase, so a multiple of 160)
                                                                          ; we set d5 to 0 and everything renders at the top line of the screen
$0007a3a2 : d5f9 0007 c504                     adda.l    $7c504,a2        ; add buffer location into a2?
$0007a3a8 : 224a                               movea.l   a2,a1            ; transfer destination address into a2
$0007a3aa : 4a44                               tst.w     d4
$0007a3ac : 6700 028c                          beq       $7a63a
$0007a3b0 : 47f9 0007 a624                     lea       $7a624,a3


DRAW SPRITE:
- If we get to 7a3b0, we have a sprite to draw.
- lots of space here for a new blitter routine!
$0007a3b0 : 47f9 0007 a624                     lea       $7a624,a3
$0007a3b6 : 13f3 4000 0007 a3c3                move.b    (a3,d4.w),$7a3c3 ; d4 contains the number of 16 pixel blocks to draw
$0007a3be : 5343                               subq.w    #1,d3
$0007a3c0 : 6000 00b6                          bra       $7a478
- 7a3b6 writes to the instruction at 7a3c0
- this would appear to determine how many blocks of 16 pixels to draw
- a0 is the source data of the bitmap
- a1 is the destination address
- d3 might be the number of lines to be drawn (see 7a490)
$0007a48c : d0c7   adda.w    d7,a0
$0007a48e : d2c6   adda.w    d6,a1
- at the end of each line, a0+=d7 and a1+=d6
- so d6 is the number of destination bytes to skip after each line
- d7 is the number of source bytes to skip after each line (non-zero only when clipping)
possible values at 7a3c3 (in lookup table at 7a624):
- ca = 0x7a48c (d4 = 0, draw nothing)
- b6 = 0x7a478 (d4 = 1, draw 16 pixels)
- a2 = 0x7a464 (d4 = 2, draw 32 pixels)
- 8e = 0x7a450 (d4 = 3, draw 48 pixels)
- 7a = 0x7a43c (d4 = 4, draw 64 pixels)
- 66 = 0x7a428 (d4 = 5, draw 80 pixels)
- 52 = 0x7a414 (d4 = 6, draw 96 pixels)
- 3e = 0x7a400 (d4 = 7, draw 112 pixels)
- 2a = 0x7a3ec (d4 = 8, draw 128 pixels)
- 16 = 0x7a3d8 (d4 = 9, draw 144 pixels)
- 02 = 0x7a3c4 (d4 = 10, draw 160 pixels)

this code looks like it might relate to rounding off sprites to the nearest 16 pixels
- a0 contains some kind of lookup table, with the following entries:
  - 0x5a374
  - 0x5a38c
  - 0x5a3a4
  - 0x5a3bc
- these look to be pointers to chunky data

$0007a2dc : c279 0007 a642                     and.w     $7a642,d1 ; do something to source address
$0007a2e2 : 3401                               move.w    d1,d2 ; move source address to d2
$0007a2e4 : e842                               asr.w     #4,d2 ; d2 contains source address divided by 16
$0007a2e6 : 0241 000f                          andi.w    #$f,d1 ; d1 contains source address anded with 15
$0007a2ea : 3001                               move.w    d1,d0
$0007a2ec : 0240 fffc                          andi.w    #$fffc,d0 ; round off to longword
$0007a2f0 : 2070 0000                          movea.l   (a0,d0.w),a0 ; fetch source from lookup


instruction at 0x79e62 - this seems to specify the position of the left marker at the start/finish line
instructions at 0x79e6a and 0x79e76 - they seem redundant, but code crashes without them?

------

7a608 - car drawing routine

755fe - updates logbase

79830 - without this, scenery and opponent cars not drawn in correct order

79f5e (from 798fc) - draws a car
7989a (from 79896)
790e6 (from 7659a) - status panel?
7a64c (from 7659e) 
7a676 (from 7a65c)
78a04 (from 765a2)
79efe (from 7983a) - draw opponent car?
7a04a (from 79f28) - inside draw opponent car - not sure of purpose??
7a712 (from 7a6ee) - inside some kind of drawing routine?
78a2a (from 000765F6) ??

> w 0x76e04 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1

> w 0x7761a 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1

> w 0x7778a 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1

> w 0x777e6 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1 0x22 0xc1

does this get written using self modifying code? $000777da : 4e75                               rts

here's something that appears to draw the road, once per frame

WHAT DO WE NEED TO KNOW?
	- on screen centre of road (looks like d1&76690)
	- which of the variations of road to draw (normal road, pit lane or start line, which stripe colour)
	- the width of the road (

suspected road width is written at instruction before 0x7901a
>d 0x78fc0 for instructions in this vicinity
w 0x78ffa 0x20 0x3c 0x00 0x00 0x09 0x86

0x79412 draws the solid bit of the sky
$00079412 : 48e4 fcf0                          movem.l   d0-d5/a0-a3,-(a4)
$00079416 : 48e4 fcf0                          movem.l   d0-d5/a0-a3,-(a4)
$0007941a : 48e4 fcf0                          movem.l   d0-d5/a0-a3,-(a4)
$0007941e : 48e4 fcf0                          movem.l   d0-d5/a0-a3,-(a4)
$00079422 : 51cf ffee                          dbra      d7,$79412

$000795a2: this is inside the loop that draws the mountains?

0x795aa: could this be the solid ground drawing?

; 795c5 and 795c7 determine the pattern to be drawn in this area

$000795aa : 3e2e 0064                          move.w    $64(a6),d7
$000795ae : 6300 003e                          bls       $795ee
$000795b2 : 322e 0062                          move.w    $62(a6),d1
$000795b6 : d247                               add.w     d7,d1
$000795b8 : 3001                               move.w    d1,d0
$000795ba : e541                               asl.w     #2,d1
$000795bc : d240                               add.w     d0,d1
$000795be : eb41                               asl.w     #5,d1
$000795c0 : 2846                               movea.l   d6,a4
$000795c2 : d8c1                               adda.w    d1,a4
$000795c4 : 7000                               moveq     #0,d0
$000795c6 : 72ff                               moveq     #$ff,d1
$000795c8 : 2400                               move.l    d0,d2
$000795ca : 2800                               move.l    d0,d4
$000795cc : 2040                               movea.l   d0,a0
$000795ce : 2440                               movea.l   d0,a2
$000795d0 : 2601                               move.l    d1,d3
$000795d2 : 2a01                               move.l    d1,d5
$000795d4 : 2241                               movea.l   d1,a1
$000795d6 : 2641                               movea.l   d1,a3
$000795d8 : 5347                               subq.w    #1,d7
$000795da : 48e4 fcf0                          movem.l   d0-d5/a0-a3,-(a4)
$000795de : 48e4 fcf0                          movem.l   d0-d5/a0-a3,-(a4)
$000795e2 : 48e4 fcf0                          movem.l   d0-d5/a0-a3,-(a4)
$000795e6 : 48e4 fcf0                          movem.l   d0-d5/a0-a3,-(a4)
$000795ea : 51cf ffee                          dbra      d7,$795da


$0007658a : 6100 2be4                          bsr       $79170 ; this subroutine draws the sky

    $0007658a : 6100 2be4                          bsr       $79170
    $0007658e : 4a79 0007 c586                     tst.w     $7c586
    $00076594 : 660c                               bne.s     $765a2
    $00076596 : 6100 3162                          bsr       $796fa
    $0007659a : 6100 2b4a                          bsr       $790e6
    $0007659e : 6100 40ac                          bsr       $7a64c
    $000765a2 : 6100 2460                          bsr       $78a04
    $000765a6 : 4a79 0007 cd5c                     tst.w     $7cd5c
    $000765ac : 6714                               beq.s     $765c2
    $000765ae : 4a79 0007 c63c                     tst.w     $7c63c
    $000765b4 : 660c                               bne.s     $765c2
    $000765b6 : 6100 24c4                          bsr       $78a7c
    $000765ba : 6100 2998                          bsr       $78f54
    $000765be : 6100 2a78                          bsr       $79038
    $000765c2 : 4a79 0007 cd5c                     tst.w     $7cd5c
    $000765c8 : 670c                               beq.s     $765d6
    $000765ca : 4a79 0007 c63c                     tst.w     $7c63c
    $000765d0 : 6604                               bne.s     $765d6
    $000765d2 : 6100 004a                          bsr       $7661e
    $000765d6 : 6100 2ba8                          bsr       $79180
    $000765da : 4a79 0007 cd5c                     tst.w     $7cd5c
    $000765e0 : 6714                               beq.s     $765f6
    $000765e2 : 4a79 0007 c63c                     tst.w     $7c63c
    $000765e8 : 660c                               bne.s     $65f6
    $000765ea : 6100 34c6                          bsr       $79ab2 ; disabled - what does this do?
    $000765ee : 6100 2b06                          bsr       $790f6
    $000765f2 : 6100 406c                          bsr       $7a660
    $000765f6 : 6100 2432                          bsr       $78a2a
    $000765fa : 6000 fd20                          bra       $7631c
    $000765fe : 2279 0007 c504                     movea.l   $7c504,a1
    $00076604 : 49f9 0002 b400                     lea       $2b400,a4
    $0007660a : 2a39 0007 c596                     move.l    $7c596,d5
    $00076610 : 3239 0007 c5a0                     move.w    $7c5a0,d1
    $00076616 : 3839 0007 c592                     move.w    $7c592,d4
    $0007661c : 6022                               bra.s     $76640
    $0007661e : 2279 0007 c504                     movea.l   $7c504,a1
    $00076624 : d2fc 4100                          adda.w    #$4100,a1
    $00076628 : 49f9 0002 b640                     lea       $2b640,a4
    $0007662e : 2a39 0007 c64c                     move.l    $7c64c,d5
    $00076634 : 3239 0007 c656                     move.w    $7c656,d1
    $0007663a : 3839 0007 c648                     move.w    $7c648,d4
    $00076640 : 47f9 0007 685a                     lea       $7685a,a3
    $00076646 : 33fc ffff 0007 67c8                move.w    #$ffff,$767c8
    $0007664e : e85d                               ror.w     #4,d5
    $00076650 : 0245 07ff                          andi.w    #$7ff,d5
    $00076654 : 33c5 0007 667c                     move.w    d5,$7667c
    $0007665a : 3e01                               move.w    d1,d7
    $0007665c : d241                               add.w     d1,d1
    $0007665e : d8c1                               adda.w    d1,a4
    $00076660 : d8c1                               adda.w    d1,a4
    $00076662 : d8c1                               adda.w    d1,a4
    $00076664 : c2fc 0050                          mulu.w    #$50,d1
    $00076668 : d2c1                               adda.w    d1,a1
    $0007666a : e744                               asl.w     #3,d4
    $0007666c : 4ef9 0008 0004                     jmp       $80004



	$00076654 : 33c5 0007 667c                     move.w    d5,$7667c ; this sets the on-track position!

DRAW_FRAME_ROAD:
	$00076672 : 361c                               move.w    (a4)+,d3 ; still no idea what this is
	$00076674 : 301c                               move.w    (a4)+,d0 ; i think this is the width of the track at this line
	$00076676 : 341c                               move.w    (a4)+,d2 ; i think this is the on track position of the line relative to the car
	$00076678 : 3c03                               move.w    d3,d6
	$0007667a : 0642 034a                          addi.w    #$34a,d2 ; the add value is being modified by something else! this is the on track position!
	$0007667e : 0243 fffc                          andi.w    #$fffc,d3 ; strip the bottom two bits from d3
	$00076682 : 3200                               move.w    d0,d1
	$00076684 : d241                               add.w     d1,d1
	$00076686 : 0643 f8e8                          addi.w    #$f8e8,d3 ; this add value is being modified by something else!
	$0007668a : c3c3                               muls.w    d3,d1
	$0007668c : 4841                               swap      d1
	$0007668e : 4441                               neg.w     d1

	$00076690 : 0641 0090                          addi.w    #$90,d1 ; d1 is definitely on-screen centre of road
	$00076694 : 3601                               move.w    d1,d3
	$00076696 : e848                               lsr.w     #4,d0
	$00076698 : 3a00                               move.w    d0,d5
	$0007669a : 0245 fff0                          andi.w    #$fff0,d5 ; need to find out what this is
	$0007669e : d240                               add.w     d0,d1 ; add half width of road to get right edge position
	$000766a0 : 9640                               sub.w     d0,d3 ; sub half width of road to get left edge position
	$000766a2 : 0806 0000                          btst      #0,d6; so could d6 be the track position of the current line?
	$000766a6 : 6714                               beq.s     NOT_THE_PITS ; if we nop this, the whole track becomes a pit lane
	$000766a8 : 0802 000a                          btst      #$a,d2
	$000766ac : 6706                               beq.s     $766b4 ; if we nop this, the dotted pit lane marker becomes solid
	$000766ae : 33c1 0007 67c8                     move.w    d1,$767c8
	$000766b4 : 3001                               move.w    d1,d0
	$000766b6 : 9043                               sub.w     d3,d0 ; adjust one side of road to add pits
	$000766b8 : e448                               lsr.w     #2,d0
	$000766ba : d240                               add.w     d0,d1

NOT_THE_PITS:
	$000766bc : 4a41                               tst.w     d1 ; this is just a normal road then, if we jumped from 766a6
    $000766be : 6b00 0132                          bmi       $767f2
	$000766c2 : b67c 0140                          cmp.w     #$140,d3
	$000766c6 : 6a00 012a                          bpl       $767f2 ; this segment of road should be drawn as a solid piece of ground rather than a piece of road
	$000766d6 : 0806 0001                          btst      #1,d6
	$000766da : 675e                               beq.s     DRAW_NOT_START_LINE ; if we nop this, the road is made up of a solid line like the start line

DRAW_START_LINE:
	$000766dc : 3c03                               move.w    d3,d6 ; start of the routine to draw a solid start line
	$00076700 : 0246 000f                          andi.w    #$f,d6 ; bring d6 into a 0-15 range
	$00076704 : e946                               asl.w     #4,d6 ; bring d6 into a 0-127 range, with 4 sized increments
	$00076706 : 4bf9 0007 687e                     lea       $7687e,a5 ; looks like we have a 256 byte lookup table
	$0007670c : dac6                               adda.w    d6,a5 ; a5 now contains an address of a 32bit value in the lookup table
	$0007670e : 0244 000f                          andi.w    #$f,d4 ; bring d4 into a 0-15 range
	$00076712 : e944                               asl.w     #4,d4 ; bring d4 into a 0-127 range, with 4 sized increments
	$00076714 : 41f9 0007 697e                     lea       $7697e,a0 ; looks like a 256 byte lookup table
	$0007671a : d0c4                               adda.w    d4,a0 ; a0 now contains an address of a 32bit value in the lookup table
	$0007671c : b67c ffff                          cmp.w     #$ffff,d3
	$00076720 : 6602                               bne.s     $76724
	$00076722 : 504d                               addq.w    #8,a5
	$00076724 : b27c ffff                          cmp.w     #$ffff,d1
	$00076728 : 6602                               bne.s     $7672c
	$0007672c : 72ff                               moveq     #$ff,d1
	$0007672e : 7000                               moveq     #0,d0
	$00076730 : 7400                               moveq     #0,d2
	$00076732 : 3401                               move.w    d1,d2
	$00076734 : 2602                               move.l    d2,d3
	$00076736 : 4843                               swap      d3
	$00076738 : 6072                               bra.s     DRAW_SELF_MODIFYING_SPAN ; call the fast line renderer below for a solid start line

DRAW_NOT_START_LINE:
	$0007673a : 3c03                               move.w    d3,d6
	$0007673c : 3801                               move.w    d1,d4
	$0007673e : e843                               asr.w     #4,d3
	$00076740 : e841                               asr.w     #4,d1 ; first mention of d1
	$00076742 : 3001                               move.w    d1,d0
	$00076744 : 9043                               sub.w     d3,d0 
	$00076746 : e540                               asl.w     #2,d0 ; what happens here if we set d0 to 0
	$00076748 : 4df9 0007 6c22                     lea       $76c22,a6 ; start of big self modifying road lookup routine
	$0007674e : 2c76 0000                          movea.l   (a6,d0.w),a6 ; a6 = 76c22[d0.w]
	$00076752 : 303c 0014                          move.w    #$14,d0 ; d0 = 20 ; changing this to other values skews the road
	$00076756 : 9043                               sub.w     d3,d0 ; d0 -= d3
	$00076758 : d040                               add.w     d0,d0 ; d0 += d0
	$0007675a : d040                               add.w     d0,d0 ; d0 += d0 ; a6 = ((20 - d3) * 4)
	$0007675c : dcc0                               adda.w    d0,a6 ; a6 is the place we jump to to draw the road
	$0007675e : ea4a                               lsr.w     #5,d2
	$00076760 : 0242 0020                          andi.w    #$20,d2
	$00076764 : 0246 000f                          andi.w    #$f,d6
	$00076768 : 8c45                               or.w      d5,d6 ; if we nop this, the left stripe becomes 1 pixel wide, d5 must be something to do with road width
	$0007676a : ed46                               asl.w     #6,d6
	$0007676c : dc42                               add.w     d2,d6 ; i think we can determine what colour of road to draw depending on whether d2 is zero here
	$0007676e : 4bf9 0002 bd40                     lea       $2bd40,a5
	$00076774 : dac6                               adda.w    d6,a5
	$00076776 : 0244 000f                          andi.w    #$f,d4
	$0007677a : 8845                               or.w      d5,d4 ; if we nop this, the left stripe becomes 1 pixel wide, d5 must be something to do with road width
	$0007677c : ed44                               asl.w     #6,d4
	$0007677e : d842                               add.w     d2,d4
	$00076780 : 41f9 0002 bd50                     lea       $2bd50,a0
	$00076786 : d0c4                               adda.w    d4,a0
	$00076788 : b67c ffff                          cmp.w     #$ffff,d3
	$0007678c : 6602                               bne.s     $76790 ; something to do with the source offset for the left side of the road 
	$0007678e : 504d                               addq.w    #8,a5
	$00076790 : b27c ffff                          cmp.w     #$ffff,d1
	$00076794 : 6602                               bne.s     $76798
    $00076796 : 5048                               addq.w    #8,a0
	$00076798 : 72ff                               moveq     #$ff,d1 ; here we set d1
	$0007679a : 7000                               moveq     #0,d0 ; here we set d0
	$0007679c : 4a42                               tst.w     d2 ; which colour stripe should this be?
	$0007679e : 6702                               beq.s     SOMETHING ; if we nop this, centre section of road loses stripe
	$000767a0 : 3001                               move.w    d1,d0 ; d0 = d1 (set low word of d0 to ff)
SOMETHING
	$000767a2 : 76ff                               moveq     #$ff,d3 
	$000767a4 : 2400                               move.l    d0,d2
	$000767a6 : 4842                               swap      d2
	$000767a8 : 3401                               move.w    d1,d2
	$000767aa : 4842                               swap      d2
    ; at this point, d0 and d1 contain the two halves of the 64 bit value that we'll write to the screen

DRAW_SELF_MODIFYING_SPAN:
	$000767ac : 3c2e 0050                          move.w    $50(a6),d6 ; stash the graphics instruction into d6
	$000767b0 : 3d7c 4e75 0050                     move.w    #$4e75,$50(a6) ; overwrite the graphics instruction
	$000767b6 : 4e96                               jsr       (a6)
	$000767b8 : 3d46 0050                          move.w    d6,$50(a6) ; restore the graphics instruction

--- END code we want to intercept?

$000767f2 : 7c00                               moveq     #0,d6 ; this draws a solid block of ground on the current line
$000767f4 : 7aff                               moveq     #$ff,d5
$000767f6 : 22c6                               move.l    d6,(a1)+
$000767f8 : 22c5                               move.l    d5,(a1)+

...

...
$00076846 : 33fc ffff 0007 67c8                move.w    #$ffff,$767c8 ; ensures pit lane markings are drawn correctly?

$00076850 : be7c 0054                          cmp.w     #$60,d7 (#60 is number of lines to be drawn)
$00076854 : 6600 fe1c                          bne       $76672
$00076858 : 4e75                               rts ; this appears to be called once per frame (to draw the screen?)


there's an interesting set of unrolled instructions at: $000791d8

b ($777c2).w ! ($777c2).w

- there appears to be an address for each line drawn on the screen
- presumably these addresses are modified?

0x793e6 (called as part of 79170): does this draw the empty parts of the sky?


what does 0x76850 do?
	w 0x76853 0x54 - changes the comparison
	this seems to adjust the number of lines to be draw

trying to work out the road horizontal shifting code:
	$00076690 : 0641 0090                          addi.w    #$90,d1
	- i changed this to zero and it shifts the road over to the left
what does 0x766ba do?
	- this only gets executed when the pit lane is visible

7734e - not a subroutine but looks like drawing code:
0007734E 22c0                     MOVE.L D0,(A1)+ [0000ffff]
00077350 22c1                     MOVE.L D1,(A1)+ [ffffffff]
00077352 22c0                     MOVE.L D0,(A1)+ [0000ffff]
00077354 22c1                     MOVE.L D1,(A1)+ [ffffffff]
00077356 22c0                     MOVE.L D0,(A1)+ [0000ffff]
00077358 22c1                     MOVE.L D1,(A1)+ [ffffffff]
0007735A 22dd                     MOVE.L (A5)+ [0000ffff],(A1)+ [0000ffff]
0007735C 22dd                     MOVE.L (A5)+ [fffffff8],(A1)+ [fffffff8]
0007735E 22dd                     MOVE.L (A5)+ [07ffffff],(A1)+ [07ffffff]
00077360 22dd                     MOVE.L (A5)+ [ffff07ff],(A1)+ [ffff07ff]
00077362 22c2                     MOVE.L D2,(A1)+ [ffffffff]
00077364 22c3                     MOVE.L D3,(A1)+ [ffffffff]

78a02 - this is the rts of the massive unrolled loop above

70640 - switch palette? seems to load address of palette register and copy words over

 w 0x7659a 0x4e 0x71 0x4e 0x71

physbases:
	00 01 00 fb
	00 01 00 01


$00070572 : 48e7 fffe                          movem.l   d0-d7/a0-a6,-(sp)
$00070576 : 4a79 0007 07c4                     tst.w     $707c4
$0007057c : 6700 003a                          beq       $705b8


$0007063a : 41f9 0007 07f6                     lea       $707f6,a0
$00070640 : 43f8 8240                          lea       $ffff8240.w,a1
$00070644 : 22d8                               move.l    (a0)+,(a1)+
$00070646 : 22d8                               move.l    (a0)+,(a1)+
$00070648 : 22d8                               move.l    (a0)+,(a1)+
$0007064a : 22d8                               move.l    (a0)+,(a1)+
$0007064c : 41f9 0007 07e6                     lea       $707e6,a0
$00070652 : 22d8                               move.l    (a0)+,(a1)+
$00070654 : 22d8                               move.l    (a0)+,(a1)+
$00070656 : 41f9 0007 085e                     lea       $7085e,a0
$0007065c : 22d8                               move.l    (a0)+,(a1)+
$0007065e : 22d8                               move.l    (a0)+,(a1)+
$00070660 : 11fc 0000 fa1b                     move.b    #0,$fffffa1b.w ; timer B control
$00070666 : 11fc 0027 fa21                     move.b    #$27,$fffffa21.w
$0007066c : 11fc 0008 fa1b                     move.b    #8,$fffffa1b.w
$00070672 : 21fc 0007 0684 0120                move.l    #$70684,$0120.w
$0007067a : 6100 026a                          bsr       $708e6


$0007a04a : 33f9 0007 c5b6 0007 ac+            move.w    $7c5b6,$7ac20
$0007a054 : 33f9 0007 c592 0007 ac+            move.w    $7c592,$7ac22
$0007a05e : 247c 0000 0000                     movea.l   #0,a2
$0007a064 : 33fc ffff 0007 a27e                move.w    #$ffff,$7a27e
$0007a06c : 6000 00aa                          bra       $7a118
$0007a118 : b07c 0040                          cmp.w     #$40,d0
$0007a11c : 6400 008c                          bcc       $7a1aa
$0007a120 : 5379 0007 ac20                     subq.w    #1,$7ac20
$0007a126 : b079 0007 ac20                     cmp.w     $7ac20,d0
$0007a12c : 6400 014c                          bcc       $7a27a

$0007a130 : e24a                               lsr.w     #1,d2
$0007a132 : 3602                               move.w    d2,d3
$0007a134 : d040                               add.w     d0,d0
$0007a136 : 3800                               move.w    d0,d4
$0007a138 : d844                               add.w     d4,d4
$0007a13a : d844                               add.w     d4,d4
$0007a13c : 41f9 0002 b880                     lea       $2b880,a0
$0007a142 : 33f0 4004 0007 ad6e                move.w    4(a0,d4.w),$7ad6e
$0007a14a : 33f0 4006 0007 a280                move.w    6(a0,d4.w),$7a280
$0007a152 : 3430 4008                          move.w    8(a0,d4.w),d2 ; something to do with calculating horizontal position of cars and scenery
$0007a156 : 3a30 4000                          move.w    (a0,d4.w),d5 ; something to do with calculating horizontal position of cars and scenery
$0007a15a : 9445                               sub.w     d5,d2
$0007a15c : c5c3                               muls.w    d3,d2
$0007a15e : d482                               add.l     d2,d2
$0007a160 : 4842                               swap      d2
$0007a162 : d445                               add.w     d5,d2
$0007a164 : 9279 0007 ac22                     sub.w     $7ac22,d1
$0007a16a : e741                               asl.w     #3,d1
$0007a16c : 9242                               sub.w     d2,d1
$0007a16e : 3430 400a                          move.w    $a(a0,d4.w),d2
$0007a172 : 3a30 4002                          move.w    2(a0,d4.w),d5
$0007a176 : 9445                               sub.w     d5,d2
$0007a178 : c5c3                               muls.w    d3,d2
$0007a17a : d482                               add.l     d2,d2
$0007a17c : 4842                               swap      d2
$0007a17e : d445                               add.w     d5,d2
$0007a180 : 41f9 0003 0e40                     lea       $30e40,a0
$0007a186 : 3830 0002                          move.w    2(a0,d0.w),d4
$0007a18a : 3a30 0000                          move.w    (a0,d0.w),d5
$0007a18e : 9845                               sub.w     d5,d4
$0007a190 : c9c3                               muls.w    d3,d4
$0007a192 : d884                               add.l     d4,d4
$0007a194 : 4844                               swap      d4
$0007a196 : d845                               add.w     d5,d4
$0007a198 : d844                               add.w     d4,d4
$0007a19a : c3c4                               muls.w    d4,d1
$0007a19c : 4841                               swap      d1
$0007a19e : b47c 005e                          cmp.w     #$5e,d2 ; lower clipping plane?
$0007a1a2 : 6504                               bcs.s     $7a1a8

$0007a1a8 : 6056                               bra.s     $7a200
$0007a200 : 4a79 0007 cc74                     tst.w     $7cc74
$0007a206 : 6b68                               bmi.s     $7a270
$0007a208 : 670e                               beq.s     $7a218
$0007a20a : 2279 0007 a276                     movea.l   $7a276,a1
$0007a210 : 47f9 0007 acc6                     lea       $7acc6,a3
$0007a216 : 600c                               bra.s     $7a224
$0007a224 : 3c07                               move.w    d7,d6
$0007a226 : e747                               asl.w     #3,d7
$0007a228 : de46                               add.w     d6,d7
$0007a22a : 3c01                               move.w    d1,d6
$0007a22c : 4446                               neg.w     d6
$0007a22e : 0646 0090                          addi.w    #$90,d6
$0007a232 : e446                               asr.w     #2,d6
$0007a234 : 4a79 0007 cc74                     tst.w     $7cc74
$0007a23a : 6608                               bne.s     $7a244
$0007a244 : 3839 0007 a280                     move.w    $7a280,d4
$0007a24a : 4444                               neg.w     d4
$0007a24c : e444                               asr.w     #2,d4
$0007a24e : dc44                               add.w     d4,d6
$0007a250 : e646                               asr.w     #3,d6
$0007a252 : 4a46                               tst.w     d6
$0007a254 : 6a02                               bpl.s     $7a258
$0007a258 : bc7c 0008                          cmp.w     #8,d6
$0007a25c : 6b02                               bmi.s     $7a260
$0007a260 : 33c6 0007 a27c                     move.w    d6,$7a27c
$0007a266 : de46                               add.w     d6,d7
$0007a268 : 1e33 7000                          move.b    (a3,d7.w),d7
$0007a26c : 0247 00ff                          andi.w    #$ff,d7
$0007a270 : 6012                               bra.s     $7a284
$0007a284 : 0641 0090                          addi.w    #$90,d1
$0007a288 : de47                               add.w     d7,d7
$0007a28a : de47                               add.w     d7,d7
$0007a28c : 2049                               movea.l   a1,a0
$0007a28e : 2070 7000                          movea.l   (a0,d7.w),a0
$0007a292 : 3818                               move.w    (a0)+,d4
$0007a294 : 3618                               move.w    (a0)+,d3
$0007a296 : 33d8 0007 ad72                     move.w    (a0)+,$7ad72
$0007a29c : 33d8 0007 a642                     move.w    (a0)+,$7a642
$0007a2a2 : 4a79 0007 a27e                     tst.w     $7a27e
$0007a2a8 : 6b08                               bmi.s     $7a2b2
$0007a2b2 : 3e02                               move.w    d2,d7
$0007a2b4 : 9443                               sub.w     d3,d2
$0007a2b6 : 5242                               addq.w    #1,d2
$0007a2b8 : 3a02                               move.w    d2,d5
$0007a2ba : 3004                               move.w    d4,d0
$0007a2bc : e240                               asr.w     #1,d0
$0007a2be : 9240                               sub.w     d0,d1
$0007a2c0 : 33c4 0007 abf6                     move.w    d4,$7abf6
$0007a2c6 : 33c1 0007 abf8                     move.w    d1,$7abf8
$0007a2cc : 33c7 0007 abfa                     move.w    d7,$7abfa
$0007a2d2 : 3039 0007 a642                     move.w    $7a642,d0
$0007a2d8 : e240                               asr.w     #1,d0
$0007a2da : 9240                               sub.w     d0,d1

$0007a684 : de47                               add.w     d7,d7
$0007a686 : de47                               add.w     d7,d7
$0007a688 : 2673 7000                          movea.l   (a3,d7.w),a3
$0007a68c : 4ed3                               jmp       (a3)
; possible destinations:
- 









$0007a5ee : 3018                               move.w    (a0)+,d0


$0007a61a : d0c7                               adda.w    d7,a0


7659a


start line disassembly (766dc)
------------------------------

d6.w = d3.w
d4.w = d1.w
d3.w >>= 4 (signed)
d1.w >>= 4 (signed)

a6.l = 76c22[(d1-d3)<<2]

d0.w = 0x14
d0.w -= d3




for each width (20 ish to 400):
- we need a pointer to the source start of this span
- the pointer must be the centre of the span minus 160 pixels (i.e. 80 bytes)
- skew is assumed to be zero

track colours:

either:
WHITE          06 0110
GRASS_1        12 1100
LIGHT_ASPHALT  13 1101

or:
RED            02 0010
GRASS_2        14 1110
DARK_ASPHALT   15 1111

- code that sets the 4 ground palette entries is at 0x70692
- appears to read palette data from 0x70856 and write to palette entries 12 to 15:
00070856: 02 20 01 00 03 20 00 00 05 43 04 32 03 21 02 46   . ... ...C.2.!.F

$00070692 : 43f8 8258                          lea       $ffff8258.w,a1
$00070696 : 22d8                               move.l    (a0)+,(a1)+
$00070698 : 22d8                               move.l    (a0)+,(a1)+

7c92a/7ca64 - 70856 - ffff8258
7c926/7ca66 - 70858 - ffff825a
7c92c/7ca68 - 7085a - ffff825c
7c928/7ca6a - 7085c - ffff825e
43332 - 7085e
43334 - 70860
43336 - 70862
7c924 - 70864

this appears to read from and write to the above addresses:
$00074584 : 3018                               move.w    (a0)+,d0
$00074586 : 0240 0eee                          andi.w    #$eee,d0
$0007458a : e248                               lsr.w     #1,d0
$0007458c : 32c0                               move.w    d0,(a1)+
$0007458e : 4e75                               rts       

source data for palette appears to be around 0x43334

suspected amiga palette data found using maptapper:
>bgrep "00400ccc01220eee" *
GENESIS_05: 00000012
GENESIS_07: 00000012
GENESIS_12: 00000012
GENESIS_1c: 00000012

>bgrep "06410a0003100310" *
GENESIS_01: 0000000a
GENESIS_0E: 0000000a
GENESIS_13: 0000000a

- so it looks like the amiga version does the road stripes with copper rasters
- colour 13 is the colour of the kerbs, alternates between A00 and CCC
- colour 15 is the road lines, alternates between EEE and 310
- colour 12 is the grass
- colour 14 is the road colours

- so it should be possible to rip the high precision colours from the amiga version manually if we can cheat through the levels



LATEST THOUGHTS
---------------

These four instructions within the VBL ($70572) determine what to do next and how many lines to wait:

$00070660 : 11fc 0000 fa1b                     move.b    #0,$fffffa1b.w
$00070666 : 11fc 0027 fa21                     move.b    #$27,$fffffa21.w
$0007066c : 11fc 0008 fa1b                     move.b    #8,$fffffa1b.w
$00070672 : 21fc 0007 0684 0120                move.l    #$70684,$0120.w

- The value $27 in instruction $70666 represents the number of lines until the timer b routine is called
- The value $70684 in instruction $70672 represents the address of the timer b routine
- Both of these values are dynamically written by code elsewhere
- we don't want to relocate 70684, we want to slot something in before 70684
- so somewhere around 70660, we want to branch off to some new code that will decide whether to go to the new routine
- the new routine will need access to the byte value at 70669 as it represents the linesRemaining value

- What writes a word to 70666? We need to relocate it!
- It's this instruction:
$0007086e : 33c0 0007 0668                     move.w    d0,$70668

- What writes a long word to 70674? We need to relocate it!
- It's these instructions:
$00070880 : 23fc 0007 0684 0007 06+            move.l    #$70684,$70674
$0007089e : 23fc 0007 06c0 0007 06+            move.l    #$706c0,$70674

SKY GRADIENT
------------

- 70684 is the current routine that represents the colour changes from sky to ground.
- we know this because,
- starting at 70692, we change some palette entries. We can mark these on the raster by changing palette entry 0 instead as follows:
- w 0x70695 0x40
- our routine almost certainly needs to chain into 70684 once complete, BUT ONLY IF 70864 NEEDS TO BE CALLED

- when horizon is visible, this updates the timer b vector to be 70684:
- $00070672 : 21fc 0007 0684 0120                move.l    #$70684,$0120.w

- 70684 only gets called when we can see the switch from sky to ground, which presumably is why cyprian's code crashes
- how does 70684 only get called when we can see the switch from sky to ground?
- This is how:

- 70684 gets chained here (inside 70572, the VBL routine that 0x70 points to):
$00070672 : 21fc 0007 0684 0120                move.l    #$70684,$0120.w
- HOWEVER, this looks to be modified. When we can't see the sky-ground transition, it looks like this:
$00070672 : 21fc 0007 06c0 0120                move.l    #$706c0,$0120.w
- The following instructions modify the vector address, and instructions nearby also change the palette source:
$00070880 : 23fc 0007 0684 0007 06+            move.l    #$70684,$70674
$0007089e : 23fc 0007 06c0 0007 06+            move.l    #$706c0,$70674

- so if the horizon is not visible, we just set a couple of colours differently,
and the next raster change is the end of the player 1 playfield (706c0)!

This is the code that modifies the number of lines instruction within 70684 to wait for the sky-ground transition:
$0007087a : 33c0 0007 06a2                     move.w    d0,$706a2
(Here's the instruction that gets modified:)
$000706a0 : 11fc 0038 fa21                     move.b    #$38,$fffffa21.w
SO IF WE RELOCATE 70684, THIS (AND 70672) WILL NEED TO BE REFLECTED

ACTION REQUIRED:
- change bytes 0007 0684 within instruction at $70880 to point to relocated 70684
- change bytes within instruction at $7087a to point to the appropriate address within the relocated 70684

- Here's the instruction that modifies the number of lines to count before the timer b triggers:
- When the vector is 706c0, this will be set to 0x60 (96) - the end of player 1 playfield
$0007086e : 33c0 0007 0668                     move.w    d0,$70668

- 3 values we need to keep track of:
- number of lines until next colour change
    - won't this always be 4?
- colour of next colour change
- number of lines remaining

- we need a series of chained timer b routines, one per colour change
- then we need to determine
    - which timer b routine to call initially
    - how many lines to wait before calling that routine
- then we need to determine which timer b routine we will terminate in
    - we'll need to change the followup routine address within that routine to the ground-sky transition
    - we'll need to correct the number of lines to wait until the ground-sky transition

- each one needs to be immediately preceded

0x7c59c indicates the pitch of the car (for player 1 presumably)
this is calculated as: 0x7c546 + 0x56 = 7c59c (a4 might be the base address of the current player?)
$00076466 : 396c 001a 0056                     move.w    $1a(a4),$56(a4)

gradient can be 16 steps of 4 pixels each


const COLOUR_RED = 2;             // 0010
const COLOUR_WHITE = 6;           // 0110
const COLOUR_GREY = 5;            // 0101
const COLOUR_LIGHT_ASPHALT = 13;  // 1101
const COLOUR_GRASS_1 = 12;        // 1100
const COLOUR_DARK_ASPHALT = 15;   // 1111
const COLOUR_GRASS_2 = 14;        // 1110

note: bitplane 2 is always 1
WHITE          0110 -> want 0110
LIGHT_ASPHALT  1101 -> want 0110
GRASS_1        1100 -> want 1100

note: bitplane 3 is always 1
RED            0010 -> want 0110
DARK_ASPHALT   1111 -> want 0110 -> 
GRASS_2        1110

            $rumbleStripColour = COLOUR_RED;
            $roadLinesColour = COLOUR_DARK_ASPHALT;
            $asphaltColour = COLOUR_DARK_ASPHALT;
            $grassColour = COLOUR_GRASS_2;


colours of the road and grass
-----------------------------

- there are four words at 70856 that get written to ffff8258 to set the colours for the road and grass
- this happens at 7068c

- value gets read from address $43332 at pc=74584, modified to ST format and written back to address $7085e
- value gets read from address $32e34 at pc=744cc and written back to $43332 (32e34 is presumably in the buffer)
- value gets read from $36912 and written to $32e36, $pc=74d38
- value gets read from $36917 and written to $36913, $pc=74d38

$00074584 : 3018                               move.w    (a0)+,d0
$00074586 : 0240 0eee                          andi.w    #$eee,d0
$0007458a : e248                               lsr.w     #1,d0
$0007458c : 32c0                               move.w    d0,(a1)+ ; where is this being read from?
$0007458e : 4e75                               rts       

sample colours
08ae 048c 0259 004e 0224 0222 048c
addresses written to:
70856
70858
7085a
7085c
7085e
70860
70862
70864
on the iceland track, this results in the following values at $70856 with the patch:
02 46 01 12 02 35 01 11 04 57 02 46 01 ac 00 27

0888
0000
0444
0486
0220
0020
0444
0242

- there are some colours specified in a lookup starting at 7c924
- there are two colours specified at 7085e



starting at 744c8, 80 words get copied from 321C2 to 43330
- what are they?

- the filename is "filexx.scr"
- this gets adjusted at runtime
- the adjustable parts "xx" are at $7d368
- these are the instructions that rewrite the filename
  - $000745ea : 13f0 1000 0007 d368                move.b    (a0,d1.w),$7d368
  - $000745f2 : 13f0 0000 0007 d369                move.b    (a0,d0.w),$7d369

descrunfil CONFIRMED AT 74B2C
fopen cars.rel
load to 70400
mfopen 0x80000.LZ4
load to 321c0
fopen file80.scr
load to 1be00
fopen file81.scr
load to 1be00
fopen file83.scr
load to 30d40
fopen filec0.scr
load to 30d40
fopen filec1.scr
load to 30d40
fopen filec8.scr
load to 30d40
fopen filec9.scr
load to 30d40
fopen file50.scr
load to 30d40
fopen file78.scr
load to 30d40
fopen filef0.scr ; amiga source suggests that this is the gremlin/magfields screen
load to 30d40
fopen filef5.scr
(magnetic fields screen shows)
load to 30d40
fopen filefd.scr
(title screen appears and music starts)
load to 03d40

$00074606 : 4e41 trap #1
fopen file87.scr (function 61)
function number, filename address, read mode
d7: [00 3d] [00 07 d3 62] [00 00]

00074622 4e41 TRAP #$01
fread (function 63)
    func    handle  count         buf 
d7: [00 3f] [00 06] [00 03 0d 40] [00 01 be 00]
fread

00074638 4e41 TRAP #$01
d7: [00 3e]
fclose

$74606:
fread (function 61)
[00 3d] [00 07 d3 62] [00 00]
fopen file84.scr

00074622 4e41 TRAP #$01
fread (function 63)
    func    handle  count         buf 
d7: [00 3f] [00 06] [00 03 0d 40] [00 01 be 00]

move.w    mode,-(sp)   ; Offset 6
pea       fname        ; Offset 2
move.w    #61,-(sp)    ; Offset 0
trap      #1           ; GEMDOS
addq.l    #8,sp        ; Correct stack

so:
- fopen is at $74606
- fread is at $74622
- fclose is at $74638
- rts at 7463c

what is 7a1c6?

fopen is at 74606
decompress routine is at 74b2c
command to show loaded filename: m 0x0007d362

after options screen:
(easy 1)
74606: fopen file30.scr
74b2c: a1=321C0, a2=10000
74606: fopen file86.scr
74b2c: a1=23B00, a2=10000
74606: fopen file8a.scr
74b2c: a1=268F4, a2=10000
74606: fopen file89.scr
74b2c: a1=276A4, a2=10000
74606: fopen file94.scr
74b2c: a1=29354, a2=10000
74606: fopen file8b.scr
74b2c: a1=2E3C6, a2=10000
74606: fopen file59.scr
74b2c: a1=2FD40, a2=10000
74606: fopen file60.scr
74b2c: a1=23B00, a2=10000
(easy 1 race end)
74606: fopen fileed.scr
(no call to 74b2c - is this either uncompressed or compressed using a different method?)
74606: fopen fileec.scr
74b2c: a1=47980, a2=10000
74606: fopen file30.scr
742bc: a1=321C0, a2=10000
(race result displayed)
74606: fopen file8f.scr
(easy 2 - mexico loading screen displayed)
742bc: a1=23B00, a2=10000
74606: fopen file9e.scr
742bc: a1=2513E, a2=10000
74606: fopen file9d.scr
742bc: a1=26100, a2=10000
74606: fopen file8b.scr
742bc: a1=285e4, a2=10000
74606: fopen file8a.scr
742bc: a1=290ce, a2=10000
74606: fopen filea1.scr
742bc: a1=29E7E, a2=10000
74606: fopen file9f.scr
742bc: a1=2B53E, a2=10000
74606: fopen file59.scr
742bc: a1=2fd40, a2=10000
74606: fopen file60.scr
742bc: a1=23B00, a2=10000
(easy 2 - mexico - race start)
(easy 2 - mexico - race end)
74606: fopen fileed.scr
(no call to 74b2c - is this either uncompressed or compressed using a different method?)
74606: fopen fileec.scr
74b2c: a1=47980, a2=10000
(race result displayed, screen clears)
74606: fopen file30.scr
(current table displayed)
742bc: a1=321C0, a2=10000
(current table clears)
74606: fopen filee8f.scr
(easy 3 - iceland loading screen displayed)
742bc: a1=23b00, a2=10000
74606: fopen file87.scr
74b2c: a1=2513e, a2=10000
74606: fopen file84.scr
74b2c: a1=2ad4a, a2=10000
74606: fopen file8b.scr
74b2c: a1=2D78E, a2=10000
74606: fopen file8a.scr
74b2c: a1=2E278, a2=10000
74606: fopen file59.scr
74b2c: a1=2FD40, a2=10000
74606: fopen file60.scr
74b2c: a1=23B00, a2=10000
(easy 3 - iceland - race start)
(easy 3 - iceland - race end)
74606: fopen fileed.scr
74606: fopen fileec.scr
74b2c: a1=47980, a2=10000
(race result displayed, screen clears)
74606: fopen file30.scr
(current table displayed)
742bc: a1=321C0, a2=10000
(screen clears)
74606: fopen fileaa.scr
(easy 4 - spain loading screen displayed)
742bc: a1=23B00, a2=10000
74606: fopen file8a.scr
742bc: a1=2A6D4, a2=10000
74606: fopen file8b.scr
742bc: a1=2B484, a2=10000
74606: fopen file8f.scr
742bc: a1=2BF6E, a2=10000
74606: fopen file59.scr
742bc: a1=2FD40, a2=10000
74606: fopen file60.scr
742bc: a1=23B00, a2=10000

see list of pointers at 321c0 - what are they?


0x32204 - 0x334dc
0x334dc - 0x343f4


could we add some supplemental code at 74582?

74474 appears to be some kind of init routine for palette amongst other things

$000744b4 : 207c 0003 2e30                     movea.l   #$32e30,a0
$000744b4 : 207c 0003 37d4                     movea.l   #$337d4,a0
this instruction gets modified!

after the file has been unpacked to 321c0, overwrite all colour data with that of the amiga version

replace the code at 744ba to a jsr into high memory
- then we can copy the gradient into the correct location
somewhere around 7c796 (maybe 7d07e?), there appears to be some kind of palette lookup table


$00073a3c : 2f08                               move.l    a0,-(sp)
$00073a3e : 3039 0007 cd5a                     move.w    $7cd5a,d0
$00073a44 : d040                               add.w     d0,d0
$00073a46 : 41f9 0007 d342                     lea       $7d342,a0
$00073a4c : 3230 0000                          move.w    (a0,d0.w),d1
$00073a50 : d279 0007 d07e                     add.w     $7d07e,d1
$00073a56 : 205f                               movea.l   (sp)+,a0
$00073a58 : 4e75                               rts       

looks like a table begins at 7d07e, and there's an index into this table at 7d342, with the input into the index provided by the value at 7cd5a

7c910 - something to do with colours? What does this do?



we need to look at replacing this:
$0007450c : 43f9 0007 0858                     lea       $70858,a1 ; set destination - needs 
$00074512 : 6100 0070                          bsr       $74584
$00074516 : 5449                               addq.w    #2,a1
$00074518 : 6100 006a                          bsr       $74584
$0007451c : 5149                               subq.w    #8,a1
$0007451e : 6100 0064                          bsr       $74584
$00074522 : 5449                               addq.w    #2,a1
$00074524 : 6100 005e                          bsr       $74584

Looks like CARS.REL is loaded at 70400
Need to disassemble the loader with Ghidra

Memory detection:
$42E  L     phystop     Physical RAM top (points to first unusable byte RAM)

Machine detection:
https://www.atari-forum.com/viewtopic.php?t=15038

With MYLOADER.PRG, the byte at offset 1c is loaded to address $aa9a:
$0000aa9a : a00a                               linea     #$a
- So is aa9a the actual code of substance that loads the game? This appears to run AFTER the splash screen!
- It looks like the code at aa9a gets overwritten once the splash screen has displayed!

- abea is the instruction that appears to start the process of loading cars.rel

- here's the code that appears to overwrite the content at aa9a - where does it come from?

$000f7fd0 : b478 224d                          cmp.w     $224d.w,d2
$000f7fd4 : 2029 000c                          move.l    $c(a1),d0
$000f7fd8 : d0a9 0014                          add.l     $14(a1),d0
$000f7fdc : e488                               lsr.l     #2,d0
$000f7fde : 5480                               addq.l    #2,d0
$000f7fe0 : 43e9 0100                          lea       $100(a1),a1
$000f7fe4 : 2449                               movea.l   a1,a2
$000f7fe6 : 22db                               move.l    (a3)+,(a1)+
$000f7fe8 : 5380                               subq.l    #1,d0
$000f7fea : 66fa                               bne.s     $f7fe6
$000f7fec : 206d 0018                          movea.l   $18(a5),a0
$000f7ff0 : 4298                               clr.l     (a0)+
$000f7ff2 : b1cf                               cmpa.l    sp,a0
$000f7ff4 : 65fa                               bcs.s     $f7ff0
$000f7ff6 : 4ed2                               jmp       (a2)

and the instructions above appear to be written by this loop:

$0000abc8 : 204e                               movea.l   a6,a0
$0000abca : 7025                               moveq     #$25,d0
$0000abcc : 10d9                               move.b    (a1)+,(a0)+
$0000abce : 51c8 fffc                          dbra      d0,$abcc

Going to try using lz4 as the packer for 0x80000.bin

move.l	#Addr_Lotus512RAM,A0			; LZ4_File
move.l	#0+8,A1							; Destination RAM
bsr		LZ4_Decode


Binary patching: https://superuser.com/questions/1251882/write-n-bytes-from-a-file-into-another-in-bash


disabling the graphics in the loader
physbase appears to be ( $f8000 ) . w ! ( $f8000 ) . w

w 0xab08 0x4e 0x71 0x4e 0x71 0x4e 0x71 0x4e 0x71 0x4e 0x71 0x4e 0x71 0x4e 0x71 0x4e 0x71 0x4e 0x71 0x4e 0x71 0x4e 0x71

b ($ffff8800).w ! ($ffff8800).w :trace

--------------
instructions that modify the sound registers

driving along
$00070b1a : 0588 0000                          movep.w   d2,0(a0)
$00070b26 : 0588 0000                          movep.w   d2,0(a0)
$00070b34 : 0588 0000                          movep.w   d2,0(a0)
$00070b40 : 0588 0000                          movep.w   d2,0(a0)
$00070bca : 10bc 0007                          move.b    #7,(a0)
$00070bde : 0188 0000                          movep.w   d0,0(a0)
$00070be8 : 0588 0000                          movep.w   d2,0(a0)
$00070bf2 : 0588 0000                          movep.w   d2,0(a0)

rumble strips, or something to do with car/scenery collision?
$00070b78 : 0588 0000                          movep.w   d2,0(a0)
$00070b84 : 0588 0000                          movep.w   d2,0(a0)
$00070b9c : 0588 0000                          movep.w   d2,0(a0)
$00070bae : 0188 0000                          movep.w   d0,0(a0)
$00070bce : 1010                               move.b    (a0),d0

70a2e: some kind of collision noise countdown timer?
move.w    (a0)+,$70a2e

$00070b44 : 4a79 0007 0a2e                     tst.w     $70a2e ; is a sound effective active?
$00070b4a : 6700 007e                          beq       $70bca
$00070b4e : 5379 0007 0a2e                     subq.w    #1,$70a2e


70a30: some kind of value passed into the registers?
seems to vary depending on the sound effect required

70a0a seems to be inside the routine that triggers a sound effect
this routine seems to start at 709b2
this is the point at which 70a2e.w goes above 0

here's this routine:
$000709b2 : 48e7 fffe                          movem.l   d0-d7/a0-a6,-(sp)
$000709b6 : 3039 0007 097c                     move.w    $7097c,d0
$000709bc : 0240 0007                          andi.w    #7,d0
$000709c0 : 41f9 0007 0a34                     lea       $70a34,a0
$000709c6 : e940                               asl.w     #4,d0
$000709c8 : d0c0                               adda.w    d0,a0
$000709ca : 3010                               move.w    (a0),d0
$000709cc : b079 0007 0a24                     cmp.w     $70a24,d0
$000709d2 : 6702                               beq.s     $709d6
$000709d4 : 6410                               bcc.s     $709e6
$000709d6 : 3039 0007 0a2e                     move.w    $70a2e,d0
$000709dc : b079 0007 0a26                     cmp.w     $70a26,d0
$000709e2 : 6702                               beq.s     $709e6
$000709e4 : 6430                               bcc.s     $70a16
$000709e6 : 33d8 0007 0a24                     move.w    (a0)+,$70a24
$000709ec : 33d8 0007 0a26                     move.w    (a0)+,$70a26
$000709f2 : 33d8 0007 0a28                     move.w    (a0)+,$70a28
$000709f8 : 33d8 0007 0a2a                     move.w    (a0)+,$70a2a
$000709fe : 33d8 0007 0a2c                     move.w    (a0)+,$70a2c
$00070a04 : 33d8 0007 0a2e                     move.w    (a0)+,$70a2e
$00070a0a : 33d8 0007 0a30                     move.w    (a0)+,$70a30
$00070a10 : 33d8 0007 0a32                     move.w    (a0)+,$70a32
$00070a16 : 33fc ffff 0007 097c                move.w    #$ffff,$7097c
$00070a1e : 4cdf 7fff                          movem.l   (sp)+,d0-d7/a0-a6
$00070a22 : 4e75                               rts       

this is a couple of levels up, seems to call the above:
$00075870 : 6100 c504                          bsr       $71d76

if we go even higher, we have this:
$000707b6 : 6100 4d96                          bsr       $7554e
if we comment this out, the car stops moving

on entering $000709b2,
is 7097c the sound effect to be played?
00 01 is this the collision sound?
00 02 collision with car?
00 03 appears to be the first notes of 3-2-1-GO (after 70a22, returns to 71d02)
00 04 appears to be the final note of 3-2-1-GO
00 05 is the fuel low sound (after 70a22, returns to 71d02)
00 06 is this the rumble strip sound?
00 07 skidding sound?

These are the places where 7097c gets set:
$00071fe8 : 33c2 0007 097c                     move.w    d2,$7097c (3-2-1 sound)
$00070a16 : 33fc ffff 0007 097c                move.w    #$ffff,$7097c (hmmm)
$00071fe8 : 33c2 0007 097c                     move.w    d2,$7097c (rumble strip)
so for all sound effects, 7097c gets set at 71fe8
the start of the function that contains 71fe8 is $71d76


$00071d76 : 4a79 0007 c53e                     tst.w     $7c53e              ; seems to start at 0x100, increment up to 0x200, and then start at 0x100 again
$00071d7c : 6a2a                               bpl.s     $71da8
$00071d7e : 6100 0d74                          bsr       $72af4
$00071d82 : 33f9 0007 2af0 0007 1f+            move.w    $72af0,$71ffe
$00071d8c : 33f9 0007 2af2 0007 20+            move.w    $72af2,$72000
$00071d96 : 33fc 003f 0007 2002                move.w    #$3f,$72002
$00071d9e : 33fc 003f 0007 2004                move.w    #$3f,$72004
$00071da6 : 6058                               bra.s     $71e00
$00071da8 : 4a79 0007 c5ae                     tst.w     $7c5ae              ; is the engine sound playing (for player 1)?
$00071dae : 6720                               beq.s     $71dd0
$00071db0 : 33f9 0007 c5d6 0007 1f+            move.w    $7c5d6,$71ffe
$00071dba : 2039 0007 c596                     move.l    $7c596,d0
$00071dc0 : 90b9 0007 c57e                     sub.l     $7c57e,d0
$00071dc6 : 6100 0246                          bsr       $7200e
$00071dca : 33c0 0007 2002                     move.w    d0,$72002
$00071dd0 : 4a79 0007 cd5c                     tst.w     $7cd5c
$00071dd6 : 6728                               beq.s     $71e00
$00071dd8 : 4a79 0007 c664                     tst.w     $7c664
$00071dde : 6720                               beq.s     $71e00
$00071de0 : 33f9 0007 c68c 0007 20+            move.w    $7c68c,$72000
$00071dea : 2039 0007 c64c                     move.l    $7c64c,d0
$00071df0 : 90b9 0007 c634                     sub.l     $7c634,d0
$00071df6 : 6100 0216                          bsr       $7200e
$00071dfa : 33c0 0007 2004                     move.w    d0,$72004
$00071e00 : 4a79 0007 c53c                     tst.w     $7c53c
$00071e06 : 670c                               beq.s     $71e14
$00071e08 : 4279 0007 2002                     clr.w     $72002
$00071e0e : 4279 0007 2004                     clr.w     $72004
$00071e14 : 343c ffff                          move.w    #$ffff,d2
$00071e18 : 363c ffff                          move.w    #$ffff,d3
$00071e1c : 0c79 0032 0007 c53e                cmpi.w    #$32,$7c53e
$00071e24 : 6a34                               bpl.s     $71e5a
$00071e26 : 0c79 ff6a 0007 c53e                cmpi.w    #$ff6a,$7c53e
$00071e2e : 6726                               beq.s     $71e56
$00071e30 : 0c79 ff9c 0007 c53e                cmpi.w    #$ff9c,$7c53e
$00071e38 : 671c                               beq.s     $71e56
$00071e3a : 0c79 ffce 0007 c53e                cmpi.w    #$ffce,$7c53e
$00071e42 : 6712                               beq.s     $71e56
$00071e44 : 0c79 0000 0007 c53e                cmpi.w    #0,$7c53e
$00071e4c : 660c                               bne.s     $71e5a
$00071e4e : 343c 0004                          move.w    #4,d2           ; what's this then?
$00071e52 : 6000 0006                          bra       $71e5a
$00071e56 : 343c 0003                          move.w    #3,d2           ; what's this then?
$00071e5a : 0c79 0002 0007 cd5a                cmpi.w    #2,$7cd5a
$00071e62 : 6618                               bne.s     $71e7c
$00071e64 : 0c79 0003 0007 d07e                cmpi.w    #3,$7d07e
$00071e6c : 6700 00f6                          beq       $71f64
$00071e70 : 0c79 000c 0007 d07e                cmpi.w    #$c,$7d07e
$00071e78 : 6700 00ea                          beq       $71f64
$00071e7c : 0479 0200 0007 6158                subi.w    #$200,$76158
$00071e84 : 6a06                               bpl.s     $71e8c
$00071e86 : 4279 0007 6158                     clr.w     $76158
$00071e8c : 0c79 4000 0007 6158                cmpi.w    #$4000,$76158   ; 76158 is some kind of skidding force + phase
$00071e94 : 650a                               bcs.s     $71ea0
$00071e96 : 343c 0007                          move.w    #7,d2           ; what's this then?


$75870 - if we nop this out, there seems to be no effect apart from sound related

709b2 appears only to be entered if there's an active sound effect?
this will be why:

$00071cf6 : 4a79 0007 097c                     tst.w     $7097c          ; is there an active sound effect?
$00071cfc : 6b04                               bmi.s     $71d02
$00071cfe : 6100 ecb2                          bsr       $709b2
$00071d02 : 4a79 0007 1ffe                     tst.w     $71ffe

I think 709b2 is the code that kicks off the playing of the sound - i.e. sets a load of variables that will go on to control YM regs
- so can we just replace this with something to call DMA?
- but it also appears to reset 7097c to ffff
- is this going to be a problem?

we may be able to kill off any code that concerns itself with the following memory locations:
$000709e6 : 33d8 0007 0a24                     move.w    (a0)+,$70a24
$000709ec : 33d8 0007 0a26                     move.w    (a0)+,$70a26
$000709f2 : 33d8 0007 0a28                     move.w    (a0)+,$70a28
$000709f8 : 33d8 0007 0a2a                     move.w    (a0)+,$70a2a
$000709fe : 33d8 0007 0a2c                     move.w    (a0)+,$70a2c
$00070a04 : 33d8 0007 0a2e                     move.w    (a0)+,$70a2e
$00070a0a : 33d8 0007 0a30                     move.w    (a0)+,$70a30
$00070a10 : 33d8 0007 0a32                     move.w    (a0)+,$70a32
$00070a16 : 33fc ffff 0007 097c                move.w    #$ffff,$7097c

$00071d62 : 6100 ed50                          bsr       $70ab4
the contents of 70ab4 seem to update the value of 70a2a above
can we nop this out?
nopping this out seems to disable all engine sound and fx!
(but maybe that's what we want in the long run?)
(this seems not to break the YM music - bonus!)



$00076572 : 6100 24ec                          bsr       $78a60  ; this does some calculating of the road too
$00076576 : 6100 29c2                          bsr       $78f3a  ; this is the one that has been replaced by our calculate_raod
$0007657a : 6100 2ab2                          bsr       $7902e  ; this looks like it sets all the y positions ready for rendering
$0007657e : 4a79 0007 c586                     tst.w     $7c586
$00076584 : 6604                               bne.s     $7658a
$00076586 : 6100 0076                          bsr       $765fe  ; this draws the road
$0007658a : 6100 2be4                          bsr       $79170  ; this draws everything above the road (ground up to horizon, mountains, sky)
$0007658e : 4a79 0007 c586                     tst.w     $7c586
$00076594 : 660c                               bne.s     $765a2
$00076596 : 6100 3162                          bsr       $796fa  ; this draws all sprites
$0007659a : 6100 2b4a                          bsr       $790e6  ; this draws the status panel
$0007659e : 6100 40ac                          bsr       $7a64c  ; no idea
$000765a2 : 6100 2460                          bsr       $78a04  ; something to do with palette switching and horizon position
